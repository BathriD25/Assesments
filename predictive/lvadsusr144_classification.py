# -*- coding: utf-8 -*-
"""LVADSUSR144_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HjV9PizPJw5CU8ddCI61vLCvtuayM6pH
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder,MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,classification_report
import warnings
warnings.filterwarnings("ignore")

#data read
data = pd.read_csv("/content/mushroom.csv")
data.head()

data.shape

data.describe()

data.info()

data.isnull().sum()

data.dropna(inplace=True) # since null values is less than 5%

data.drop_duplicates(inplace=True)

data.duplicated().sum()

#check for outliers

for c in data.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,10))
  sns.boxplot(data[c])
  plt.title(f"Box plot of {c}")

#handling outliers
for c in data.select_dtypes(include=['int64','float64']).columns:
  q1 = data[c].quantile(0.25)
  q3= data[c].quantile(0.75)
  iqr = q3-q1
  low = q1-1.5*iqr
  up = q3+1.5*iqr
  data.loc[data[c]<low,c]=low
  data.loc[data[c]>up,c]=up

#correlation
plt.figure(figsize=(20,10))
sns.heatmap(data.corr(),annot=True)

# we dont need encoding since all values are numerical
# we need all features since we use it to classify them as edible are not
#feature selection

x = data.drop(columns=['class'])
y=data['class']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)

#scaling
scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

#model
model = RandomForestClassifier(n_estimators=100,random_state=43)
model.fit(x_train,y_train)
y_pred = model.predict(x_test)

acc = accuracy_score(y_test, y_pred)
cr = classification_report(y_test, y_pred)
ps = precision_score(y_test, y_pred)
rc = recall_score(y_test,y_pred)
f1 = f1_score(y_test,y_pred)
print("Accuracy Score: ", acc)
print("Precision Score: ", ps)
print("recall score:",rc)
print("f1 score:",f1)
print("Classification Report: \n", cr)