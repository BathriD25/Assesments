# -*- coding: utf-8 -*-
"""LVADSUSR144_PREDICTIVE_IA1_LAB2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vPJq53mcynE_Q9eTFWnFj16Xac9Zrz9f
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score,precision_score,f1_score,recall_score

data = pd.read_csv("/content/booking.csv")
data.head()

data = data.drop(columns='Booking_ID')

data.rename(columns= {'number of adults':'number_of_adults'},inplace=True)
data.rename(columns = {'number of children':'number_of_children'},inplace=True)
data.rename(columns = {'number of number of weekend nights':'number_of_weekend_nights'},inplace=True)
data.rename(columns = {'number of number of week nights':'number_of_week_nights'},inplace=True)
data.rename(columns = {'type of meal':'type_of_meal'},inplace=True)
data.rename(columns = {'car parking space':'car_parking_space'},inplace=True)
data.rename(columns = {'room type':'room_type'},inplace=True)
data.rename(columns = {'lead time':'lead_time'},inplace=True)

data.rename(columns = {'market segment type':'market_segment_type'},inplace=True)
data.rename(columns = {'average price':'average_price'},inplace=True)
data.rename(columns={'special requests':'special_requests'},inplace=True)
data.rename(columns={'date of reservation':'date_of_reservation'},inplace=True)
data.rename(columns={'booking status':'booking_status'},inplace=True)

data.isnull().sum()

for column in data.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.histplot(data[column])
  plt.title(f"Histogram of {column}")
  plt.xlabel(column)
  plt.ylabel("freq")
  plt.show()

data['average_price']=data['average_price'].fillna(data['average_price'].mean())
data.isnull().sum()

# outlier
for column in data.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(data[column])
  plt.title(f"Boxplot of {column}")
  plt.show()

# encoding
le = LabelEncoder()
data['room_type']=le.fit_transform(data['room_type'])
data['type_of_meal']=le.fit_transform(data['type_of_meal'])
data['booking_status']=le.fit_transform(data['booking_status'])

data.drop_duplicates(inplace=True)

data.drop(columns='market_segment_type',axis=1,inplace=True)

x = data.drop(columns=['booking_status','date_of_reservation'])
y = data['booking_status']
x

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)
scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

model = LogisticRegression()
model.fit(x_train,y_train)
y_pred = model.predict(x_test)

print("confusion matrix:")
print(confusion_matrix(y_test,y_pred))
print("Classification Report:")
print(classification_report(y_test,y_pred))
print("Accuracy:")
print(accuracy_score(y_test,y_pred))
print("Precision:")
print(precision_score(y_test,y_pred))
print("Recall:")
print(recall_score(y_test,y_pred))
print("F1 score:")
print(f1_score(Y_test,y_pred))