# -*- coding: utf-8 -*-
"""LVADSUSR144_BATHRI_FINAL_CLUSTERING.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uPGzdIWd5kWiNgY83Ajj-IvjRaBVWkgI
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,f1_score,classification_report,silhouette_score
import warnings
warnings.filterwarnings("ignore")

data = pd.read_csv("/content/customer_segmentation.csv")
data.head()

data.isnull().sum()

plt.figure(figsize=(10,5))
sns.histplot(data['Income'])
data['Income']=data['Income'].fillna(data['Income'].mean())

data.isnull().sum()

data.duplicated().sum()

plt.figure(figsize=(10,5))
sns.boxplot(data)

data.info()

for column in data.select_dtypes(include=['int64','float64']).columns:
  q1 = data[column].quantile(0.25)
  q3 = data[column].quantile(0.75)
  iqr = q3-q1
  low= q1-1.5*iqr
  up = q3+1.5*iqr
  data[column]=data[column].clip(lower=low,upper=up)



cols = ['Income','NumDealsPurchases','NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth']
df = data[cols]

plt.figure(figsize=(10,5))
sns.heatmap(df.corr(),annot=True)

km = KMeans(n_clusters=3)
y_predicted = km.fit_predict(df)
print(y_predicted)

df['cluster']=y_predicted
print(df.head())

df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
plt.scatter(df1['Income'],df1['NumWebVisitsMonth'],color='green')
plt.scatter(df2['Income'],df2['NumWebVisitsMonth'],color='red')
plt.scatter(df3['Income'],df3['NumWebVisitsMonth'],color='black')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Income')
plt.ylabel('NumWebVisitsMonth')
plt.legend()

sse = []
k_rng = range(1,10)
for k in k_rng:
   km = KMeans(n_clusters=k)
   km.fit(df)
   sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng,sse)

silhouette_score(df,y_predicted)