# -*- coding: utf-8 -*-
"""LVADSUSR144_BATHRI_FINAL_CLASSIFICATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BsNen6CEQzDH4ViKzs8-4jGzQ3f6L-mD
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,f1_score,classification_report

data = pd.read_csv("/content/penguins_classification.csv")
data.head()

data.shape

data.isnull().sum()

data.duplicated().sum()

data['year']=pd.to_numeric(data['year'])

data.info()

plt.figure(figsize=(10,5))
sns.histplot(data['bill_depth_mm'])

# since its centre skewed we can treat the null with mean values
data['bill_depth_mm']=data['bill_depth_mm'].fillna(data['bill_depth_mm'].mean())

data.isnull().sum()

#lookout for outlier
plt.figure(figsize=(10,5))
sns.boxplot(data)

data = data.get_dummies(data['year'])

le = LabelEncoder()
for column in data.columns:
  data[column]=le.fit_transform(data[column])
data.head()

data.drop(columns='year',inplace=True)

sns.heatmap(data.corr(),annot=True)

x = data.drop(columns=['species','island','body_mass_g'])
y=data['species']

model=RandomForestClassifier(n_estimators=100,random_state=42)
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

scaler=MinMaxScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)
model.fit(x_train,y_train)
y_pred=model.predict(x_test)

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Precision
precision = precision_score(y_test, y_pred)
print("Precision:", precision)

# Recall
recall = recall_score(y_test, y_pred)
print("Recall:", recall)

#F1-score
from sklearn.metrics import f1_score
f1_score = f1_score(y_test, y_pred)
print("F1-score:", f1_score)