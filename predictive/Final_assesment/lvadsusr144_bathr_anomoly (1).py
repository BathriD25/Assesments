# -*- coding: utf-8 -*-
"""LVADSUSR144_BATHR_ANOMOLY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15OsM0VUr7UfdgRevNuukXKMwsNQxuIlk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,f1_score,classification_report
import warnings
warnings.filterwarnings("ignore")

data = pd.read_csv("/content/anomaly_train.csv")
data.head()

le = LabelEncoder()
data['Type']=le.fit_transform(data['Type'])
data['Location']=le.fit_transform(data['Location'])
data.head()

data.isnull().sum()
data.duplicated().sum()

#no outlier treatment in anomoly detection

features = ['Amount','Time','Location']

X = data[features]

model = IsolationForest(n_estimators=100, contamination=0.1)
model.fit(X)

y_pred = model.predict(X)

data["anomaly_score"] = model.decision_function(X)

anomalies = data.loc[data["anomaly_score"] < 0]

df_test = pd.read_csv("/content/anomaly_train.csv")
le = LabelEncoder()
df_test['Type']=le.fit_transform(data['Type'])
df_test['Location']=le.fit_transform(data['Location'])

x=df_test[['Amount','Time','Location']]
df_values=x.values

find=df_values
result=[]
for i in find:
  z=model.predict([i])
  if z==[1]:
    result.append('no')
  elif z==[-1]:
    result.append('yes')

df_test['Anomaly']=result

plt.scatter(data["Amount"], data["anomaly_score"], label="Normal")
plt.scatter(anomalies["Amount"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Amount")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

df_test.head()