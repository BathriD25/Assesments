# -*- coding: utf-8 -*-
"""LVADSUSR144_PREDICTIVE_IA1_LAB1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eetlNBHYEF7kXVI2Sw8edae4twBK0Vwn
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

data = pd.read_csv("/content/expenses.csv")
data.head()

data.isnull().sum()

data.dtypes

for column in data.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.histplot(data[column])
  plt.title(f"Histogram of {column}")
  plt.xlabel(column)
  plt.ylabel("freq")
  plt.show()

#since histogram of BMI is skewed towards the centre we can treat null values with mean
data['bmi']=data['bmi'].fillna(data['bmi'].mean())

data.isnull().sum()

#outliers
for column in data.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(data[column])
  plt.title(f"Boxplot of {column}")
  plt.show()

#we could detect outliers in BMI and charges
# outliers in charges column is fine for the business context but outliers in BMI needs to be treated

q1  = np.quantile(data['bmi'],0.25)
q2 = np.quantile(data['bmi'],0.75)
iqr = q2-q1
low_bound = q1-1.5*iqr
up_bound = q2+1.5*iqr
outlier = [i for i in data['bmi'] if i<low_bound or i>up_bound]
print(low_bound)
print(up_bound)
print(outlier)

le = LabelEncoder()
for column in data.columns:
  data[column]=le.fit_transform(data[column])
data

num_cor = data.corr()
plt.figure(figsize=(20,10))
sns.heatmap(num_cor,annot=True)
plt.show()

# we dont want features like children,region to analyse the charges thus we can remove
# we can remove duplicates
data.drop_duplicates(inplace=True)
data = data.drop(columns=['children','region'])

num_cor = data.corr()
plt.figure(figsize=(20,10))
sns.heatmap(num_cor,annot=True)
plt.show()

#splitting
x = data.drop(columns=['charges'])
y = data['charges']
x

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)
scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

model = LinearRegression()
model.fit(x_train,y_train)
y_pred = model.predict(x_test)

print("mean squared error:")
print(mean_squared_error(y_test,y_pred))
print("root mean squred error:")
print(mean_squared_error(y_test,y_pred,squared=False))
print("r2 score:")
print(r2_score(y_test,y_pred))